import socketIOClient, { Socket } from 'socket.io-client';
import { Event, SOCKET_SERVER_URL } from '../socket-vars';
import JumpDiffusionModel from '../price-models';
import { round } from '../utils';
import { priceChange } from './utils';


export class Instrument {
  /**
   * The Instrument class models an equity instrument 
   * such as a stock, option or ETF. Each instrument 
   * is identified by a ticker symbol. 
   * 
   * The price of an Instrument instance is determined 
   * by a price model given by the 'model' property. 
   * The socket property allows the instrument to send 
   * price updates to the socket server. 
   */
  symbol: string;
  price: number;
  private readonly model: JumpDiffusionModel;
  private readonly socket: Socket;

  constructor(symbol: string, startPrice: number) {
    this.symbol = symbol;
    this.price  = startPrice;
    this.model  = new JumpDiffusionModel;
    this.socket = socketIOClient(SOCKET_SERVER_URL);

    this.simulatePrice(); // begin price simulation
  }

  simulatePrice(): void {
    /**
     * Simulates trading activity for an instrument.
     * 
     * Given the current price, this method will use
     * the instrument's price model to arrive at a
     * new price.
     * 
     * With the new price generated by the model, the
     * instrument's socket will emit a message with
     * the new price data. 
     */
    setInterval(() => {
      const nextPrice = this.model.nextPrice(this.price);
      const {
        change, 
        changePct
      } = priceChange(this.price, nextPrice);

      this.price = round(nextPrice); // update the price

      this.socket.emit(Event.PRICE_UPDATE, {
        symbol: this.symbol,
        current: this.price,
        change,
        changePct 
      });
      
    }, 1000 + Math.floor(Math.random() * 3) - 2);
  } 
}